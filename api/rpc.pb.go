// Code generated by proto-gen-gogo. DO NOT EDIT.
// source: github.com/vine-io/rbac/api/rpc.proto

package api

import (
	context "context"
	ebinary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	api "github.com/vine-io/vine/lib/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = ebinary.BigEndian

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

type AddPolicyRequest struct {
	// +gen:required
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// +gen:required
	Endpoint *api.Endpoint `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *AddPolicyRequest) Reset()         { *m = AddPolicyRequest{} }
func (m *AddPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*AddPolicyRequest) ProtoMessage()    {}
func (*AddPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9060b076f5d7dc, []int{0}
}
func (m *AddPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPolicyRequest.Merge(m, src)
}
func (m *AddPolicyRequest) XXX_Size() int {
	return m.XSize()
}
func (m *AddPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPolicyRequest proto.InternalMessageInfo

type AddPolicyResponse struct {
}

func (m *AddPolicyResponse) Reset()         { *m = AddPolicyResponse{} }
func (m *AddPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*AddPolicyResponse) ProtoMessage()    {}
func (*AddPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9060b076f5d7dc, []int{1}
}
func (m *AddPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPolicyResponse.Merge(m, src)
}
func (m *AddPolicyResponse) XXX_Size() int {
	return m.XSize()
}
func (m *AddPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPolicyResponse proto.InternalMessageInfo

type AddGroupPolicyRequest struct {
	// +gen:required
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (m *AddGroupPolicyRequest) Reset()         { *m = AddGroupPolicyRequest{} }
func (m *AddGroupPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*AddGroupPolicyRequest) ProtoMessage()    {}
func (*AddGroupPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9060b076f5d7dc, []int{2}
}
func (m *AddGroupPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGroupPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGroupPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGroupPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGroupPolicyRequest.Merge(m, src)
}
func (m *AddGroupPolicyRequest) XXX_Size() int {
	return m.XSize()
}
func (m *AddGroupPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGroupPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddGroupPolicyRequest proto.InternalMessageInfo

type AddGroupPolicyResponse struct {
}

func (m *AddGroupPolicyResponse) Reset()         { *m = AddGroupPolicyResponse{} }
func (m *AddGroupPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*AddGroupPolicyResponse) ProtoMessage()    {}
func (*AddGroupPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9060b076f5d7dc, []int{3}
}
func (m *AddGroupPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGroupPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGroupPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGroupPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGroupPolicyResponse.Merge(m, src)
}
func (m *AddGroupPolicyResponse) XXX_Size() int {
	return m.XSize()
}
func (m *AddGroupPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGroupPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddGroupPolicyResponse proto.InternalMessageInfo

type DelGroupPolicyRequest struct {
	// +gen:required
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (m *DelGroupPolicyRequest) Reset()         { *m = DelGroupPolicyRequest{} }
func (m *DelGroupPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*DelGroupPolicyRequest) ProtoMessage()    {}
func (*DelGroupPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9060b076f5d7dc, []int{4}
}
func (m *DelGroupPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelGroupPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelGroupPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelGroupPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelGroupPolicyRequest.Merge(m, src)
}
func (m *DelGroupPolicyRequest) XXX_Size() int {
	return m.XSize()
}
func (m *DelGroupPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelGroupPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelGroupPolicyRequest proto.InternalMessageInfo

type DelGroupPolicyResponse struct {
}

func (m *DelGroupPolicyResponse) Reset()         { *m = DelGroupPolicyResponse{} }
func (m *DelGroupPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*DelGroupPolicyResponse) ProtoMessage()    {}
func (*DelGroupPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9060b076f5d7dc, []int{5}
}
func (m *DelGroupPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelGroupPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelGroupPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelGroupPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelGroupPolicyResponse.Merge(m, src)
}
func (m *DelGroupPolicyResponse) XXX_Size() int {
	return m.XSize()
}
func (m *DelGroupPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelGroupPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelGroupPolicyResponse proto.InternalMessageInfo

type EnforceRequest struct {
	// +gen:required
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	// +gen:required
	Endpoint *api.Endpoint `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *EnforceRequest) Reset()         { *m = EnforceRequest{} }
func (m *EnforceRequest) String() string { return proto.CompactTextString(m) }
func (*EnforceRequest) ProtoMessage()    {}
func (*EnforceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9060b076f5d7dc, []int{6}
}
func (m *EnforceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnforceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnforceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnforceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnforceRequest.Merge(m, src)
}
func (m *EnforceRequest) XXX_Size() int {
	return m.XSize()
}
func (m *EnforceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnforceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnforceRequest proto.InternalMessageInfo

type EnforceResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *EnforceResponse) Reset()         { *m = EnforceResponse{} }
func (m *EnforceResponse) String() string { return proto.CompactTextString(m) }
func (*EnforceResponse) ProtoMessage()    {}
func (*EnforceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9060b076f5d7dc, []int{7}
}
func (m *EnforceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnforceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnforceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnforceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnforceResponse.Merge(m, src)
}
func (m *EnforceResponse) XXX_Size() int {
	return m.XSize()
}
func (m *EnforceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnforceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnforceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddPolicyRequest)(nil), "api.AddPolicyRequest")
	proto.RegisterType((*AddPolicyResponse)(nil), "api.AddPolicyResponse")
	proto.RegisterType((*AddGroupPolicyRequest)(nil), "api.AddGroupPolicyRequest")
	proto.RegisterType((*AddGroupPolicyResponse)(nil), "api.AddGroupPolicyResponse")
	proto.RegisterType((*DelGroupPolicyRequest)(nil), "api.DelGroupPolicyRequest")
	proto.RegisterType((*DelGroupPolicyResponse)(nil), "api.DelGroupPolicyResponse")
	proto.RegisterType((*EnforceRequest)(nil), "api.EnforceRequest")
	proto.RegisterType((*EnforceResponse)(nil), "api.EnforceResponse")
}

func init() {
	proto.RegisterFile("github.com/vine-io/rbac/api/rpc.proto", fileDescriptor_cd9060b076f5d7dc)
}

var fileDescriptor_cd9060b076f5d7dc = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcb, 0x6e, 0xda, 0x40,
	0x14, 0x86, 0x6d, 0x90, 0xb8, 0x1c, 0x5a, 0x4a, 0x87, 0x82, 0x90, 0x91, 0x2c, 0x64, 0xa9, 0x08,
	0x16, 0xb5, 0x25, 0xda, 0x55, 0x37, 0x15, 0xb4, 0xa8, 0xea, 0xa2, 0x2a, 0x32, 0xbb, 0xee, 0x7c,
	0x99, 0x36, 0x13, 0x39, 0x9e, 0x89, 0xc7, 0x46, 0xca, 0x5b, 0x64, 0x93, 0x77, 0x62, 0xc9, 0x32,
	0xcb, 0x04, 0x5e, 0x24, 0xb2, 0x3d, 0x5c, 0xec, 0x58, 0x6c, 0x92, 0x95, 0xed, 0x73, 0x7e, 0x7f,
	0xc7, 0xfa, 0xc6, 0x07, 0x3e, 0xfe, 0x27, 0xe1, 0x45, 0x64, 0xeb, 0x0e, 0xbd, 0x32, 0x56, 0xc4,
	0xc7, 0x9f, 0x08, 0x35, 0x02, 0xdb, 0x72, 0x0c, 0x8b, 0x11, 0x23, 0x60, 0x8e, 0xce, 0x02, 0x1a,
	0x52, 0x54, 0xb6, 0x18, 0x51, 0x86, 0x67, 0xb3, 0xb6, 0x25, 0xc2, 0xca, 0xb8, 0x20, 0x17, 0x5f,
	0x0d, 0x8f, 0xd8, 0x49, 0xd6, 0x62, 0x24, 0x8d, 0x6a, 0x7f, 0xa0, 0x35, 0x75, 0xdd, 0x05, 0xf5,
	0x88, 0x73, 0x63, 0xe2, 0xeb, 0x08, 0xf3, 0x10, 0xb5, 0xa0, 0xcc, 0x23, 0xbb, 0x27, 0x0f, 0xe4,
	0x51, 0xdd, 0x8c, 0x6f, 0xd1, 0x18, 0x6a, 0xd8, 0x77, 0x19, 0x25, 0x7e, 0xd8, 0x2b, 0x0d, 0xe4,
	0x51, 0x63, 0xf2, 0x56, 0x8f, 0x19, 0x73, 0x51, 0x34, 0x0f, 0x6d, 0xad, 0x0d, 0xef, 0x4f, 0x80,
	0x9c, 0x51, 0x9f, 0x63, 0xed, 0x1b, 0x74, 0xa6, 0xae, 0xfb, 0x33, 0xa0, 0x11, 0xcb, 0x8e, 0x1a,
	0x42, 0x95, 0x47, 0xf6, 0x25, 0x76, 0xc2, 0x64, 0x5c, 0x63, 0xf2, 0x26, 0xe1, 0x2e, 0xd3, 0x9a,
	0xb9, 0x6f, 0x6a, 0x3d, 0xe8, 0xe6, 0x01, 0x47, 0xf4, 0x0f, 0xec, 0xbd, 0x0c, 0x9d, 0x07, 0x08,
	0xf4, 0x6f, 0x68, 0xce, 0xfd, 0x7f, 0x34, 0x70, 0xf0, 0xab, 0x98, 0x19, 0xc3, 0xbb, 0x03, 0x2e,
	0x9d, 0x80, 0xba, 0x50, 0x09, 0x30, 0x8f, 0xbc, 0xf4, 0x13, 0x6b, 0xa6, 0x78, 0x9a, 0xdc, 0x95,
	0xa0, 0x61, 0xce, 0xa6, 0xdf, 0x97, 0x38, 0x58, 0x11, 0x07, 0xa3, 0xaf, 0x50, 0x3f, 0x48, 0x45,
	0x9d, 0x64, 0x40, 0xfe, 0xd4, 0x94, 0x6e, 0xbe, 0x2c, 0x66, 0xfc, 0x82, 0x66, 0x56, 0x1d, 0x52,
	0xf6, 0xc9, 0xe7, 0xd6, 0x94, 0x7e, 0x61, 0xef, 0x88, 0xca, 0xaa, 0x12, 0xa8, 0xc2, 0x03, 0x10,
	0xa8, 0x62, 0xb7, 0xe8, 0x0b, 0x54, 0x85, 0x0c, 0xd4, 0x16, 0xc2, 0x4e, 0x4d, 0x2b, 0x1f, 0xb2,
	0xc5, 0xf4, 0xad, 0x99, 0xb9, 0x7e, 0x54, 0xa5, 0xf5, 0x56, 0x95, 0x37, 0x5b, 0x55, 0x7e, 0xd8,
	0xaa, 0xf2, 0xed, 0x4e, 0x95, 0x36, 0x3b, 0x55, 0xba, 0xdf, 0xa9, 0x12, 0x74, 0x08, 0xd5, 0xe3,
	0xdf, 0x5c, 0xe7, 0xa9, 0x36, 0xae, 0xc7, 0x3b, 0xb1, 0x90, 0xff, 0xf6, 0xcf, 0xec, 0x8d, 0x5d,
	0x49, 0x16, 0xe1, 0xf3, 0x53, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x5d, 0x38, 0xfa, 0x89, 0x03,
	0x00, 0x00,
}

func (m *AddPolicyRequest) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sub)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Endpoint != nil {
		l = m.Endpoint.XSize()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *AddPolicyResponse) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddGroupPolicyRequest) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.XSize()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *AddGroupPolicyResponse) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DelGroupPolicyRequest) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.XSize()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *DelGroupPolicyResponse) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EnforceRequest) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sub)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Endpoint != nil {
		l = m.Endpoint.XSize()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *EnforceResponse) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Endpoint != nil {
		{
			size, err := m.Endpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sub) > 0 {
		i -= len(m.Sub)
		copy(dAtA[i:], m.Sub)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Sub)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddGroupPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGroupPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGroupPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddGroupPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGroupPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddGroupPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DelGroupPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelGroupPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelGroupPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelGroupPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelGroupPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelGroupPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EnforceRequest) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnforceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnforceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Endpoint != nil {
		{
			size, err := m.Endpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sub) > 0 {
		i -= len(m.Sub)
		copy(dAtA[i:], m.Sub)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Sub)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnforceResponse) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnforceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnforceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoint == nil {
				m.Endpoint = &api.Endpoint{}
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGroupPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGroupPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGroupPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGroupPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGroupPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGroupPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelGroupPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelGroupPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelGroupPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelGroupPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelGroupPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelGroupPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnforceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnforceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnforceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sub = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoint == nil {
				m.Endpoint = &api.Endpoint{}
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnforceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnforceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnforceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)

// RBACServiceClient is the client API for RBACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RBACServiceClient interface {
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error)
	AddGroupPolicy(ctx context.Context, in *AddGroupPolicyRequest, opts ...grpc.CallOption) (*AddGroupPolicyResponse, error)
	DelGroupPolicy(ctx context.Context, in *DelGroupPolicyRequest, opts ...grpc.CallOption) (*DelGroupPolicyResponse, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceResponse, error)
}

type rBACServiceClient struct {
	cc *grpc.ClientConn
}

func NewRBACServiceClient(cc *grpc.ClientConn) RBACServiceClient {
	return &rBACServiceClient{cc}
}

func (c *rBACServiceClient) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error) {
	out := new(AddPolicyResponse)
	err := c.cc.Invoke(ctx, "/api.RBACService/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AddGroupPolicy(ctx context.Context, in *AddGroupPolicyRequest, opts ...grpc.CallOption) (*AddGroupPolicyResponse, error) {
	out := new(AddGroupPolicyResponse)
	err := c.cc.Invoke(ctx, "/api.RBACService/AddGroupPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DelGroupPolicy(ctx context.Context, in *DelGroupPolicyRequest, opts ...grpc.CallOption) (*DelGroupPolicyResponse, error) {
	out := new(DelGroupPolicyResponse)
	err := c.cc.Invoke(ctx, "/api.RBACService/DelGroupPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceResponse, error) {
	out := new(EnforceResponse)
	err := c.cc.Invoke(ctx, "/api.RBACService/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServiceServer is the server API for RBACService service.
type RBACServiceServer interface {
	AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error)
	AddGroupPolicy(context.Context, *AddGroupPolicyRequest) (*AddGroupPolicyResponse, error)
	DelGroupPolicy(context.Context, *DelGroupPolicyRequest) (*DelGroupPolicyResponse, error)
	Enforce(context.Context, *EnforceRequest) (*EnforceResponse, error)
}

// UnimplementedRBACServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRBACServiceServer struct {
}

func (*UnimplementedRBACServiceServer) AddPolicy(ctx context.Context, req *AddPolicyRequest) (*AddPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (*UnimplementedRBACServiceServer) AddGroupPolicy(ctx context.Context, req *AddGroupPolicyRequest) (*AddGroupPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupPolicy not implemented")
}
func (*UnimplementedRBACServiceServer) DelGroupPolicy(ctx context.Context, req *DelGroupPolicyRequest) (*DelGroupPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGroupPolicy not implemented")
}
func (*UnimplementedRBACServiceServer) Enforce(ctx context.Context, req *EnforceRequest) (*EnforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}

func RegisterRBACServiceServer(s *grpc.Server, srv RBACServiceServer) {
	s.RegisterService(&_RBACService_serviceDesc, srv)
}

func _RBACService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RBACService/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AddPolicy(ctx, req.(*AddPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AddGroupPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AddGroupPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RBACService/AddGroupPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AddGroupPolicy(ctx, req.(*AddGroupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DelGroupPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGroupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DelGroupPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RBACService/DelGroupPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DelGroupPolicy(ctx, req.(*DelGroupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RBACService/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RBACService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RBACService",
	HandlerType: (*RBACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPolicy",
			Handler:    _RBACService_AddPolicy_Handler,
		},
		{
			MethodName: "AddGroupPolicy",
			Handler:    _RBACService_AddGroupPolicy_Handler,
		},
		{
			MethodName: "DelGroupPolicy",
			Handler:    _RBACService_DelGroupPolicy_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _RBACService_Enforce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/vine-io/rbac/api/rpc.proto",
}
