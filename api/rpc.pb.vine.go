// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/vine-io/rbac/api/rpc.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	client "github.com/vine-io/vine/core/client"
	server "github.com/vine-io/vine/core/server"
	api "github.com/vine-io/vine/lib/api"
	openapi "github.com/vine-io/vine/lib/api/handler/openapi"
	openapipb "github.com/vine-io/vine/lib/api/handler/openapi/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Endpoints for RBACService service
func NewRBACServiceEndpoints() []api.Endpoint {
	return []api.Endpoint{}
}

// Swagger OpenAPI 3.0 for RBACService service
func NewRBACServiceOpenAPI() *openapipb.OpenAPI {
	return &openapipb.OpenAPI{
		Openapi: "3.0.1",
		Info: &openapipb.OpenAPIInfo{
			Title:       "RBACServiceService",
			Description: "OpenAPI3.0 for RBACService",
			Version:     "v1.0.0",
		},
		Servers: []*openapipb.OpenAPIServer{},
		Tags: []*openapipb.OpenAPITag{
			&openapipb.OpenAPITag{
				Name:        "RBACService",
				Description: "OpenAPI3.0 for RBACService",
			},
		},
		Paths: map[string]*openapipb.OpenAPIPath{},
		Components: &openapipb.OpenAPIComponents{
			SecuritySchemes: &openapipb.SecuritySchemes{},
			Schemas:         map[string]*openapipb.Model{},
		},
	}
}

// Client API for RBACService service
// +gen:openapi
type RBACService interface {
	GetAllPolicies(ctx context.Context, in *GetAllPoliciesRequest, opts ...client.CallOption) (*GetAllPoliciesResponse, error)
	GetPolicies(ctx context.Context, in *GetPoliciesRequest, opts ...client.CallOption) (*GetPoliciesResponse, error)
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...client.CallOption) (*AddPolicyResponse, error)
	DelPolicy(ctx context.Context, in *DelPolicyRequest, opts ...client.CallOption) (*DelPolicyResponse, error)
	GetGroupPolicies(ctx context.Context, in *GetGroupPoliciesRequest, opts ...client.CallOption) (*GetGroupPoliciesResponse, error)
	AddGroupPolicy(ctx context.Context, in *AddGroupPolicyRequest, opts ...client.CallOption) (*AddGroupPolicyResponse, error)
	DelGroupPolicy(ctx context.Context, in *DelGroupPolicyRequest, opts ...client.CallOption) (*DelGroupPolicyResponse, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...client.CallOption) (*EnforceResponse, error)
}

type rBACService struct {
	c    client.Client
	name string
}

func NewRBACService(name string, c client.Client) RBACService {
	return &rBACService{
		c:    c,
		name: name,
	}
}

func (c *rBACService) GetAllPolicies(ctx context.Context, in *GetAllPoliciesRequest, opts ...client.CallOption) (*GetAllPoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetAllPolicies", in)
	out := new(GetAllPoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetPolicies(ctx context.Context, in *GetPoliciesRequest, opts ...client.CallOption) (*GetPoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetPolicies", in)
	out := new(GetPoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...client.CallOption) (*AddPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.AddPolicy", in)
	out := new(AddPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DelPolicy(ctx context.Context, in *DelPolicyRequest, opts ...client.CallOption) (*DelPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.DelPolicy", in)
	out := new(DelPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) GetGroupPolicies(ctx context.Context, in *GetGroupPoliciesRequest, opts ...client.CallOption) (*GetGroupPoliciesResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.GetGroupPolicies", in)
	out := new(GetGroupPoliciesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) AddGroupPolicy(ctx context.Context, in *AddGroupPolicyRequest, opts ...client.CallOption) (*AddGroupPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.AddGroupPolicy", in)
	out := new(AddGroupPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) DelGroupPolicy(ctx context.Context, in *DelGroupPolicyRequest, opts ...client.CallOption) (*DelGroupPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.DelGroupPolicy", in)
	out := new(DelGroupPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACService) Enforce(ctx context.Context, in *EnforceRequest, opts ...client.CallOption) (*EnforceResponse, error) {
	req := c.c.NewRequest(c.name, "RBACService.Enforce", in)
	out := new(EnforceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RBACService service
// +gen:openapi
type RBACServiceHandler interface {
	GetAllPolicies(context.Context, *GetAllPoliciesRequest, *GetAllPoliciesResponse) error
	GetPolicies(context.Context, *GetPoliciesRequest, *GetPoliciesResponse) error
	AddPolicy(context.Context, *AddPolicyRequest, *AddPolicyResponse) error
	DelPolicy(context.Context, *DelPolicyRequest, *DelPolicyResponse) error
	GetGroupPolicies(context.Context, *GetGroupPoliciesRequest, *GetGroupPoliciesResponse) error
	AddGroupPolicy(context.Context, *AddGroupPolicyRequest, *AddGroupPolicyResponse) error
	DelGroupPolicy(context.Context, *DelGroupPolicyRequest, *DelGroupPolicyResponse) error
	Enforce(context.Context, *EnforceRequest, *EnforceResponse) error
}

func RegisterRBACServiceHandler(s server.Server, hdlr RBACServiceHandler, opts ...server.HandlerOption) error {
	type rBACServiceImpl interface {
		GetAllPolicies(ctx context.Context, in *GetAllPoliciesRequest, out *GetAllPoliciesResponse) error
		GetPolicies(ctx context.Context, in *GetPoliciesRequest, out *GetPoliciesResponse) error
		AddPolicy(ctx context.Context, in *AddPolicyRequest, out *AddPolicyResponse) error
		DelPolicy(ctx context.Context, in *DelPolicyRequest, out *DelPolicyResponse) error
		GetGroupPolicies(ctx context.Context, in *GetGroupPoliciesRequest, out *GetGroupPoliciesResponse) error
		AddGroupPolicy(ctx context.Context, in *AddGroupPolicyRequest, out *AddGroupPolicyResponse) error
		DelGroupPolicy(ctx context.Context, in *DelGroupPolicyRequest, out *DelGroupPolicyResponse) error
		Enforce(ctx context.Context, in *EnforceRequest, out *EnforceResponse) error
	}
	type RBACService struct {
		rBACServiceImpl
	}
	h := &rBACServiceHandler{hdlr}
	endpoints := NewRBACServiceEndpoints()
	for _, ep := range endpoints {
		opts = append(opts, api.WithEndpoint(&ep))
	}
	openapi.RegisterOpenAPIDoc(NewRBACServiceOpenAPI())
	openapi.InjectEndpoints(endpoints...)
	return s.Handle(s.NewHandler(&RBACService{h}, opts...))
}

type rBACServiceHandler struct {
	RBACServiceHandler
}

func (h *rBACServiceHandler) GetAllPolicies(ctx context.Context, in *GetAllPoliciesRequest, out *GetAllPoliciesResponse) error {
	return h.RBACServiceHandler.GetAllPolicies(ctx, in, out)
}

func (h *rBACServiceHandler) GetPolicies(ctx context.Context, in *GetPoliciesRequest, out *GetPoliciesResponse) error {
	return h.RBACServiceHandler.GetPolicies(ctx, in, out)
}

func (h *rBACServiceHandler) AddPolicy(ctx context.Context, in *AddPolicyRequest, out *AddPolicyResponse) error {
	return h.RBACServiceHandler.AddPolicy(ctx, in, out)
}

func (h *rBACServiceHandler) DelPolicy(ctx context.Context, in *DelPolicyRequest, out *DelPolicyResponse) error {
	return h.RBACServiceHandler.DelPolicy(ctx, in, out)
}

func (h *rBACServiceHandler) GetGroupPolicies(ctx context.Context, in *GetGroupPoliciesRequest, out *GetGroupPoliciesResponse) error {
	return h.RBACServiceHandler.GetGroupPolicies(ctx, in, out)
}

func (h *rBACServiceHandler) AddGroupPolicy(ctx context.Context, in *AddGroupPolicyRequest, out *AddGroupPolicyResponse) error {
	return h.RBACServiceHandler.AddGroupPolicy(ctx, in, out)
}

func (h *rBACServiceHandler) DelGroupPolicy(ctx context.Context, in *DelGroupPolicyRequest, out *DelGroupPolicyResponse) error {
	return h.RBACServiceHandler.DelGroupPolicy(ctx, in, out)
}

func (h *rBACServiceHandler) Enforce(ctx context.Context, in *EnforceRequest, out *EnforceResponse) error {
	return h.RBACServiceHandler.Enforce(ctx, in, out)
}
